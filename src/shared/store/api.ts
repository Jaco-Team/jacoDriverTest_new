// import queryString from 'query-string';
// import axios from 'axios';

// type ApiResponse<T = any> = {
//   st: boolean;
//   text: string;
//   data?: T;
// };

/*export function api(module: string = '', data: Record<string, any> = {}): Promise<ApiResponse> {
  const urlApi = 'https://api.jacochef.ru/driver/public/index.php/';

  return axios.post(urlApi + module, queryString.stringify(data))
    .then((response) => {
      if (typeof response.data === 'string') {
        return { st: false, text: response.data };
      }
      return { st: true, text: '', data: response.data };
    })
    .catch((error) => {
      if (error.code === "ERR_NETWORK") {
        //return { st: false, text: "Network error. Please try again." };
      }
      return { st: false, text: error.message || "An unknown error occurred." };
    });
}*/

// export async function api<T>(module: string = '', data: Record<string, any> = {}): Promise<ApiResponse<T>> {
// //export async function api<T>(module: string = '', data: Record<string, any> = {}): Promise<T> {
//   const urlApi = 'https://api.jacochef.ru/driver/public/index.php/';

//   try {
//     const response = await axios.post(urlApi + module, queryString.stringify(data));

//     if (typeof response.data === 'string') {
//       return { st: false, text: response.data };
//     }

//     //return response.data as T; // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ç–æ–ª—å–∫–æ `data`
//     return { st: response.data?.st ?? true, text: response.data?.text ?? '', data: response.data as T }; // –£—Å–ø–µ—à–Ω—ã–π –æ—Ç–≤–µ—Ç
//   } catch (error: any) {
//     //throw new Error(error?.message || "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞");
//     return { st: false, text: error?.message || "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞" };
//   }
// }

import queryString from 'query-string';
import axios from 'axios';

export type ApiResponse<T = any> = { st: boolean; text: string; data?: T };

// —Ä–µ–∂–∏–º –º–æ–∫–æ–≤ —Ç–æ–ª—å–∫–æ –¥–ª—è –º–æ–¥—É–ª—è "orders"
type FakeOrdersMode = 'off' | 'actions';

declare global {
  // eslint-disable-next-line no-var
  var __FAKE_ORDERS__: FakeOrdersMode | undefined;
  // eslint-disable-next-line no-var
  var __FAKE_HIDDEN_IDS__: Set<string> | undefined;
}
export {};

const URL_API = 'https://api.jacochef.ru/driver/public/index.php/';
const isDev = typeof __DEV__ !== 'undefined' ? __DEV__ : process.env.NODE_ENV !== 'production';

function actionsModeOn(module: string) {
  return isDev && module === 'orders' && (globalThis.__FAKE_ORDERS__ ?? 'off') === 'actions';
}

function ensureHiddenSet(): Set<string> {
  if (!globalThis.__FAKE_HIDDEN_IDS__) {
    globalThis.__FAKE_HIDDEN_IDS__ = new Set<string>();
  }
  return globalThis.__FAKE_HIDDEN_IDS__!;
}

function addHiddenId(maybeId: any) {
  const id = maybeId != null ? String(maybeId) : '';
  if (id) ensureHiddenSet().add(id);
}

function filterOrdersPayload(payload: any) {
  const hidden = globalThis.__FAKE_HIDDEN_IDS__;
  if (!hidden || !payload || typeof payload !== 'object') return payload;

  const filterList = (list: any) =>
    Array.isArray(list) ? list.filter((it) => !hidden.has(String(it?.id))) : list;

  // —Ñ–∏–ª—å—Ç—Ä—É–µ–º –≤–æ–∑–º–æ–∂–Ω—ã–µ –º–∞—Å—Å–∏–≤—ã –∑–∞–∫–∞–∑–æ–≤ (—Ä–µ–∞–ª—å–Ω—ã–π –±—ç–∫ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –∏—Ö)
  ['orders', 'free_orders', 'my_orders', 'other_orders', 'pred_orders'].forEach((k) => {
    if (payload[k]) payload[k] = filterList(payload[k]);
  });

  return payload;
}

export async function api<T>(module: string = '', data: Record<string, any> = {}): Promise<ApiResponse<T>> {
  // 1) READ-ONLY –î–ï–ô–°–¢–í–ò–Ø: –ø–µ—Ä–µ—Ö–≤–∞—Ç—ã–≤–∞–µ–º action'—ã –∏ –≤–æ–∑—Ä–∞—â–∞–µ–º —É—Å–ø–µ—Ö –ª–æ–∫–∞–ª—å–Ω–æ, –Ω–∏—á–µ–≥–æ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è—è –Ω–∞ –±—ç–∫
  if (actionsModeOn(module)) {
    const type = data?.type;

    if (isDev) {
      // üí° Dev-–º–∞—Ä–∫–µ—Ä: –≤–∏–¥–Ω–æ –≤ –ª–æ–≥–µ, —á—Ç–æ –ø–µ—Ä–µ—Ö–≤–∞—Ç —Å—Ä–∞–±–æ—Ç–∞–ª
      // (–≤ –ø—Ä–æ–¥–µ —Å—é–¥–∞ –Ω–µ –ø–æ–ø–∞–¥—ë–º –ø–æ —É—Å–ª–æ–≤–∏—é isDev)
      // eslint-disable-next-line no-console
      console.log('[FAKE-ORDERS:PASS]', type);
    }

    // –ù–∞–∂–∞—Ç–∏—è: "–í–∑—è—Ç—å/–û—Ç–º–µ–Ω–∏—Ç—å/–ó–∞–≤–µ—Ä—à–∏—Ç—å"
    if (type === 'actionOrder') {
      addHiddenId(data?.id);
      // –∏–º–∏—Ç–∏—Ä—É–µ–º —É—Å–ø–µ—Ö, —á—Ç–æ–±—ã UI –ø–æ—à—ë–ª –ø–æ ¬´–±–æ–µ–≤–æ–π¬ª –≤–µ—Ç–∫–µ
      return { st: true, text: '', data: { ok: true, id: String(data?.id), type_action: data?.type_action } as any };
    }

    // Fake-–ø—É—Ç—å: "–∫–ª–∏–µ–Ω—Ç –Ω–µ –≤—ã—à–µ–ª –Ω–∞ —Å–≤—è–∑—å"
    if (type === 'checkFakeOrder') {
      addHiddenId(data?.order_id);
      return { st: true, text: '', data: { ok: true, order_id: String(data?.order_id) } as any };
    }
  }

  // 2) –í–°–Å –û–°–¢–ê–õ–¨–ù–û–ï ‚Äî –†–ï–ê–õ–¨–ù–´–ô –ë–≠–ö
  try {
    const response = await axios.post(URL_API + module, queryString.stringify(data));

    if (typeof response.data === 'string') {
      return { st: false, text: response.data };
    }

    // –µ—Å–ª–∏ –≤–∫–ª—é—á—ë–Ω —Ä–µ–∂–∏–º read-only –¥–µ–π—Å—Ç–≤–∏–π ‚Äî –ø–æ—Å–ª–µ —Ä–µ–∞–ª—å–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞ —Å–∫—Ä—ã–≤–∞–µ–º –ª–æ–∫–∞–ª—å–Ω–æ ¬´–≤–∑—è—Ç—ã–µ¬ª –∑–∞–∫–∞–∑—ã
    let payload: any = response.data;
    if (actionsModeOn(module)) {
      payload = filterOrdersPayload(payload);
    }

    return { st: payload?.st ?? true, text: payload?.text ?? '', data: payload as T };
  } catch (error: any) {
    return { st: false, text: error?.message || '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞' };
  }
}





